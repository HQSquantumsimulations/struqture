name: ci_tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test_pyproject_install:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4.3.1
      with:
        python-version: '3.10'
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        default: true
    - uses: Swatinem/rust-cache@v2.2.0
    - name: Install dependencies
      run: |
        pip install maturin pytest numpy
        pip install ./struqture-py
    - name: test
      run: |
        cd ./struqture-py/python-tests/
        pytest .

  clippy_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy
      - uses: Swatinem/rust-cache@v2.2.0
      - run: cargo clippy -- -D warnings

  unittests_check:
    name: unittests_check-${{ matrix.combinations.runs_on }}
    runs-on: ${{ matrix.combinations.runs_on }}
    strategy:
      matrix:
        combinations: [
          { runs_on: "macOS-latest", rust: "x86_64-apple-darwin" },
          { runs_on: "ubuntu-latest",  rust: "x86_64-unknown-linux-gnu" },
          { runs_on: "windows-latest", rust: "x86_64-pc-windows-msvc" },
        ]
        python: [
            {py: '3.10', interpreter: "python3.10"}
        ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.combinations.rust }}
          default: true
          components: rustfmt
      - uses: Swatinem/rust-cache@v2.2.0
      - uses: actions/setup-python@v4.3.1
        with:
          python-version: ${{ matrix.python.py }}
      - run: |
          python -m pip install numpy
          cargo test --workspace --no-default-features --locked

  cargo-deny:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: EmbarkStudios/cargo-deny-action@v1
      with:
        log-level: warn
        command: check
        arguments: --all-features
        command-arguments: ""

  test_maturin_builds_linux_windows:
    name: maturin_check-${{ matrix.combinations.runs_on }}
    runs-on: ${{ matrix.combinations.runs_on }}
    strategy:
      matrix:
        combinations: [
          { runs_on: 'ubuntu-latest',  rust: "x86_64-unknown-linux-gnu" },
        ]
        python: [
            {py: '3.10', interpreter: "python3.10"}
        ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.combinations.rust }}
          default: true
      - uses: Swatinem/rust-cache@v2.2.0
      - uses: actions/setup-python@v4.3.1
        with:
          python-version: ${{ matrix.python.py }}
      - name: linux wheels
        uses: messense/maturin-action@v1
        with:
          maturin-version: latest
          command: build
          manylinux: 2014
          args: -i python${{ matrix.python.py }} --out wheels  -m struqture-py/Cargo.toml --locked
      - name: test install
        run: |
          pip install wheels/* --force-reinstall

  test_maturin_builds_linux_src:
    name: maturin_check_src-${{ matrix.combinations.runs_on }}
    runs-on: ${{ matrix.combinations.runs_on }}
    strategy:
      matrix:
        combinations: [
          { runs_on: 'ubuntu-latest',  rust: "x86_64-unknown-linux-gnu" },
        ]
        python: [
            {py: '3.10', interpreter: "python3.10"}
        ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.combinations.rust }}
          default: true
      - uses: Swatinem/rust-cache@v2.2.0
      - uses: actions/setup-python@v4.3.1
        with:
          python-version: ${{ matrix.python.py }}
      - name: linux wheels
        uses: messense/maturin-action@v1
        with:
          maturin-version: latest
          command: sdist
          args: --out wheels -m struqture-py/Cargo.toml
      - name: test install
        run: |
          pip install wheels/* --force-reinstall
  
  test_maturin_builds_windows:
    name: maturin_check-${{ matrix.combinations.runs_on }}
    runs-on: ${{ matrix.combinations.runs_on }}
    strategy:
      matrix:
        combinations: [
          { runs_on: 'windows-latest', rust: "x86_64-pc-windows-msvc" },
        ]
        python: [
            {py: '3.10', interpreter: "python3.10"}
        ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.combinations.rust }}
          default: true
      - uses: Swatinem/rust-cache@v2.2.0
      - uses: actions/setup-python@v4.3.1
        with:
          python-version: ${{ matrix.python.py }}
      - name: windows wheels
        uses: messense/maturin-action@v1
        with:
          maturin-version: latest
          command: build
          args: -i python --out wheels -m struqture-py/Cargo.toml --locked

  test_maturin_builds_macos:
    name: maturin_check-${{ matrix.combinations.runs_on }}
    runs-on: ${{ matrix.combinations.runs_on }}
    strategy:
      matrix:
        combinations: [
          { runs_on: 'macOS-latest', rust: "aarch64-apple-darwin" },
        ]
        python: [
            {py: '3.10', interpreter: "python3.10"},
            {py: '3.11', interpreter: "python3.11"}
        ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.combinations.rust }}
          default: true
      - uses: Swatinem/rust-cache@v2.2.0
      - uses: actions/setup-python@v4.3.1
        with:
          python-version: ${{ matrix.python.py }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip maturin pytest numpy twine        
      - name: macos wheels
        if: ${{ matrix.combinations.runs_on == 'macOS-latest' && matrix.python-version < '3.8'}}
        run: |
          RUSTFLAGS="-C link-arg=-undefined -C link-arg=dynamic_lookup" maturin build -i ${{ matrix.python.interpreter }} --out wheels  -m struqture-py/Cargo.toml --locked
      - name: universal wheels
        if: ${{ matrix.combinations.runs_on == 'macOS-latest' && matrix.python-version >= '3.8' }}
        run: |
          RUSTFLAGS="-C link-arg=-undefined -C link-arg=dynamic_lookup" maturin build -i ${{ matrix.python.interpreter }} --universal2 --out wheels  -m struqture-py/Cargo.toml --locked
      - name: test install
        run: |
          pip install wheels/* --force-reinstall

  test_maturin_builds_macos_src:
    name: maturin_check_src_${{ matrix.combinations.runs_on }}
    runs-on: ${{ matrix.combinations.runs_on }}
    strategy:
      matrix:
        combinations: [
          { runs_on: 'macOS-latest', rust: "aarch64-apple-darwin" },
        ]
        python: [
            {py: '3.10', interpreter: "python3.10"}
        ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.combinations.rust }}
          default: true
      - uses: Swatinem/rust-cache@v2.2.0
      - uses: actions/setup-python@v4.3.1
        with:
          python-version: ${{ matrix.python.py }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip maturin pytest numpy twine        
      - name: macos wheels
        run: |
          maturin sdist --out wheels -m struqture-py/Cargo.toml
      - name: test install
        run: |
          RUSTFLAGS="-C link-arg=-undefined -C link-arg=dynamic_lookup" pip install wheels/* --force-reinstall
  
  doctes_check:
    name: doctest_check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: x86_64-unknown-linux-gnu
          default: true
      - uses: Swatinem/rust-cache@v2.2.0
      - run: |
          cd struqture
          cargo test --doc --locked

  code_coverage_struqture:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - uses: actions-rs/toolchain@v1
        with:
            profile: minimal
            toolchain: stable
            components: llvm-tools-preview
            override: true
      - uses: Swatinem/rust-cache@v2.2.0
      - uses: actions/setup-python@v4.3.1
        with:
          python-version: '3.10'
          cache: pip
      - uses: taiki-e/install-action@cargo-llvm-cov
      - run: |
          pip install numpy
          cargo llvm-cov --no-default-features --workspace --lcov --output-path lcov_struqture.info --fail-under-lines=89
      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v3
      #   with:
      #     # token: ${{ secrets.CODECOV_TOKEN }}
      #     files: lcov_struqture.info
      #     flags: unittests
      #     name: codecov-umbrella
      #     fail_ci_if_error: true
      #     verbose: true
  
  format_check: # needs to run after test otherwise auogenerated files are not built
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2.2.0
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt
      - run: cargo fmt --all -- --check